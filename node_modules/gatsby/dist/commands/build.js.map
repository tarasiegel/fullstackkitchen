{"version":3,"sources":["../../src/commands/build.ts"],"names":["module","exports","build","program","process","env","VERBOSE","verbose","report","setVerbose","profile","warn","name","sitePackageJson","sitePath","directory","lastRun","Date","now","pid","publicDir","path","join","openTracingConfigFile","buildActivity","phantomActivity","start","telemetry","trackCli","exitCode","buildSpan","span","setTag","gatsbyNodeGraphQLFunction","workerPool","parentSpan","graphqlRunner","GraphQLRunner","store","collectStats","graphqlTracing","queryIds","graphql","buildActivityTimer","activityTimer","stats","hasWarnings","rawMessages","toJson","moduleTrace","warnings","err","panic","Stage","BuildJavascript","end","webpackCompilationHash","hash","getState","appDataUtil","exists","dispatch","type","payload","rewriteActivityTimer","write","isTrackingEnabled","bundleSizes","assets","filter","asset","endsWith","map","size","pageDataSizes","pageDataStats","values","addSiteMeasurement","bundleStats","aggregateStats","queryStats","getStats","actions","setProgramStatus","db","saveState","buildSSRBundleActivityProgress","pageRenderer","BuildHTML","toRegenerate","toDelete","pagesCount","length","totalPagesCount","pages","postBuildActivityTimer","info","uptime","finish","logPages","writeToFile","createdFilesPath","resolve","createdFilesContent","deletedFilesPath","deletedFilesContent","fs","writeFile"],"mappings":"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","sourcesContent":["import path from \"path\"\nimport report from \"gatsby-cli/lib/reporter\"\nimport signalExit from \"signal-exit\"\nimport fs from \"fs-extra\"\nimport telemetry from \"gatsby-telemetry\"\n\nimport {\n  buildRenderer,\n  buildHTMLPagesAndDeleteStaleArtifacts,\n  IBuildArgs,\n} from \"./build-html\"\nimport { buildProductionBundle } from \"./build-javascript\"\nimport { bootstrap } from \"../bootstrap\"\nimport apiRunnerNode from \"../utils/api-runner-node\"\nimport { GraphQLRunner } from \"../query/graphql-runner\"\nimport { copyStaticDirs } from \"../utils/get-static-dir\"\nimport { initTracer, stopTracer } from \"../utils/tracer\"\nimport db from \"../db\"\nimport { store } from \"../redux\"\nimport * as appDataUtil from \"../utils/app-data\"\nimport { flush as flushPendingPageDataWrites } from \"../utils/page-data\"\nimport {\n  structureWebpackErrors,\n  reportWebpackWarnings,\n} from \"../utils/webpack-error-utils\"\nimport {\n  userGetsSevenDayFeedback,\n  userPassesFeedbackRequestHeuristic,\n  showFeedbackRequest,\n  showSevenDayFeedbackRequest,\n} from \"../utils/feedback\"\nimport { actions } from \"../redux/actions\"\nimport { waitUntilAllJobsComplete } from \"../utils/wait-until-jobs-complete\"\nimport { Stage } from \"./types\"\nimport {\n  calculateDirtyQueries,\n  runStaticQueries,\n  runPageQueries,\n  writeOutRequires,\n} from \"../services\"\nimport {\n  markWebpackStatusAsPending,\n  markWebpackStatusAsDone,\n} from \"../utils/webpack-status\"\nimport { updateSiteMetadata, isTruthy } from \"gatsby-core-utils\"\n\nmodule.exports = async function build(program: IBuildArgs): Promise<void> {\n  if (isTruthy(process.env.VERBOSE)) {\n    program.verbose = true\n  }\n  report.setVerbose(program.verbose)\n\n  if (program.profile) {\n    report.warn(\n      `React Profiling is enabled. This can have a performance impact. See https://www.gatsbyjs.org/docs/profiling-site-performance-with-react-profiler/#performance-impact`\n    )\n  }\n\n  await updateSiteMetadata({\n    name: program.sitePackageJson.name,\n    sitePath: program.directory,\n    lastRun: Date.now(),\n    pid: process.pid,\n  })\n\n  markWebpackStatusAsPending()\n\n  const publicDir = path.join(program.directory, `public`)\n  initTracer(program.openTracingConfigFile)\n  const buildActivity = report.phantomActivity(`build`)\n  buildActivity.start()\n\n  telemetry.trackCli(`BUILD_START`)\n  signalExit(exitCode => {\n    telemetry.trackCli(`BUILD_END`, { exitCode })\n  })\n\n  const buildSpan = buildActivity.span\n  buildSpan.setTag(`directory`, program.directory)\n\n  const { gatsbyNodeGraphQLFunction, workerPool } = await bootstrap({\n    program,\n    parentSpan: buildSpan,\n  })\n\n  const graphqlRunner = new GraphQLRunner(store, {\n    collectStats: true,\n    graphqlTracing: program.graphqlTracing,\n  })\n\n  const { queryIds } = await calculateDirtyQueries({ store })\n\n  await runStaticQueries({\n    queryIds,\n    parentSpan: buildSpan,\n    store,\n    graphqlRunner,\n  })\n\n  await runPageQueries({\n    queryIds,\n    graphqlRunner,\n    parentSpan: buildSpan,\n    store,\n  })\n\n  await writeOutRequires({\n    store,\n    parentSpan: buildSpan,\n  })\n\n  await apiRunnerNode(`onPreBuild`, {\n    graphql: gatsbyNodeGraphQLFunction,\n    parentSpan: buildSpan,\n  })\n\n  // Copy files from the static directory to\n  // an equivalent static directory within public.\n  copyStaticDirs()\n\n  const buildActivityTimer = report.activityTimer(\n    `Building production JavaScript and CSS bundles`,\n    { parentSpan: buildSpan }\n  )\n  buildActivityTimer.start()\n  let stats\n  try {\n    stats = await buildProductionBundle(program, buildActivityTimer.span)\n\n    if (stats.hasWarnings()) {\n      const rawMessages = stats.toJson({ moduleTrace: false })\n      reportWebpackWarnings(rawMessages.warnings, report)\n    }\n  } catch (err) {\n    buildActivityTimer.panic(structureWebpackErrors(Stage.BuildJavascript, err))\n  } finally {\n    buildActivityTimer.end()\n  }\n\n  const webpackCompilationHash = stats.hash\n  if (\n    webpackCompilationHash !== store.getState().webpackCompilationHash ||\n    !appDataUtil.exists(publicDir)\n  ) {\n    store.dispatch({\n      type: `SET_WEBPACK_COMPILATION_HASH`,\n      payload: webpackCompilationHash,\n    })\n\n    const rewriteActivityTimer = report.activityTimer(\n      `Rewriting compilation hashes`,\n      {\n        parentSpan: buildSpan,\n      }\n    )\n    rewriteActivityTimer.start()\n\n    await appDataUtil.write(publicDir, webpackCompilationHash)\n\n    rewriteActivityTimer.end()\n  }\n\n  await flushPendingPageDataWrites()\n  markWebpackStatusAsDone()\n\n  if (telemetry.isTrackingEnabled()) {\n    // transform asset size to kB (from bytes) to fit 64 bit to numbers\n    const bundleSizes = stats\n      .toJson({ assets: true })\n      .assets.filter(asset => asset.name.endsWith(`.js`))\n      .map(asset => asset.size / 1000)\n    const pageDataSizes = [...store.getState().pageDataStats.values()]\n\n    telemetry.addSiteMeasurement(`BUILD_END`, {\n      bundleStats: telemetry.aggregateStats(bundleSizes),\n      pageDataStats: telemetry.aggregateStats(pageDataSizes),\n      queryStats: graphqlRunner.getStats(),\n    })\n  }\n\n  store.dispatch(actions.setProgramStatus(`BOOTSTRAP_QUERY_RUNNING_FINISHED`))\n\n  await db.saveState()\n\n  await waitUntilAllJobsComplete()\n\n  // we need to save it again to make sure our latest state has been saved\n  await db.saveState()\n\n  const buildSSRBundleActivityProgress = report.activityTimer(\n    `Building HTML renderer`,\n    { parentSpan: buildSpan }\n  )\n  buildSSRBundleActivityProgress.start()\n  let pageRenderer: string\n  try {\n    pageRenderer = await buildRenderer(program, Stage.BuildHTML, buildSpan)\n  } catch (err) {\n    buildActivityTimer.panic(structureWebpackErrors(Stage.BuildHTML, err))\n  } finally {\n    buildSSRBundleActivityProgress.end()\n  }\n\n  const {\n    toRegenerate,\n    toDelete,\n  } = await buildHTMLPagesAndDeleteStaleArtifacts({\n    program,\n    pageRenderer,\n    workerPool,\n    buildSpan,\n  })\n\n  telemetry.addSiteMeasurement(`BUILD_END`, {\n    pagesCount: toRegenerate.length, // number of html files that will be written\n    totalPagesCount: store.getState().pages.size, // total number of pages\n  })\n\n  const postBuildActivityTimer = report.activityTimer(`onPostBuild`, {\n    parentSpan: buildSpan,\n  })\n  postBuildActivityTimer.start()\n  await apiRunnerNode(`onPostBuild`, {\n    graphql: gatsbyNodeGraphQLFunction,\n    parentSpan: buildSpan,\n  })\n  postBuildActivityTimer.end()\n\n  // Wait for any jobs that were started in onPostBuild\n  // This could occur due to queries being run which invoke sharp for instance\n  await waitUntilAllJobsComplete()\n\n  // Make sure we saved the latest state so we have all jobs cached\n  await db.saveState()\n\n  report.info(`Done building in ${process.uptime()} sec`)\n\n  buildSpan.finish()\n  await stopTracer()\n  workerPool.end()\n  buildActivity.end()\n\n  if (program.logPages) {\n    if (toRegenerate.length) {\n      report.info(\n        `Built pages:\\n${toRegenerate\n          .map(path => `Updated page: ${path}`)\n          .join(`\\n`)}`\n      )\n    }\n\n    if (toDelete.length) {\n      report.info(\n        `Deleted pages:\\n${toDelete\n          .map(path => `Deleted page: ${path}`)\n          .join(`\\n`)}`\n      )\n    }\n  }\n\n  if (program.writeToFile) {\n    const createdFilesPath = path.resolve(\n      `${program.directory}/.cache`,\n      `newPages.txt`\n    )\n    const createdFilesContent = toRegenerate.length\n      ? `${toRegenerate.join(`\\n`)}\\n`\n      : ``\n\n    const deletedFilesPath = path.resolve(\n      `${program.directory}/.cache`,\n      `deletedPages.txt`\n    )\n    const deletedFilesContent = toDelete.length\n      ? `${toDelete.join(`\\n`)}\\n`\n      : ``\n\n    await fs.writeFile(createdFilesPath, createdFilesContent, `utf8`)\n    report.info(`.cache/newPages.txt created`)\n\n    await fs.writeFile(deletedFilesPath, deletedFilesContent, `utf8`)\n    report.info(`.cache/deletedPages.txt created`)\n  }\n\n  if (await userGetsSevenDayFeedback()) {\n    showSevenDayFeedbackRequest()\n  } else if (await userPassesFeedbackRequestHeuristic()) {\n    showFeedbackRequest()\n  }\n}\n"],"file":"build.js"}